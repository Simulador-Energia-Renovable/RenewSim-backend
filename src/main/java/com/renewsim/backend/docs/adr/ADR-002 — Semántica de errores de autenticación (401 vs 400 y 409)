# üìù ADR-0002 ‚Äî Sem√°ntica de errores de autenticaci√≥n (401 vs 400 y 409)

**ID:** ADR-0002  
**Date:** 14-08-2025  
**Status:**  Accepted 
**Version:** v1.0

---

## 1. Title  
Sem√°ntica de errores de autenticaci√≥n (401 vs 400 y 409).

---

## 2. Context  
En la implementaci√≥n original de `AuthServiceImpl.login()` se lanzaba:

```java
throw new IllegalArgumentException("Invalid username or password");
```
Esto provocaba que el controlador devolviera un HTTP 400 Bad Request en casos de credenciales inv√°lidas, lo cual no es correcto seg√∫n la sem√°ntica HTTP.
De forma similar, en el registro (register) cuando un usuario ya exist√≠a, se lanzaba una excepci√≥n gen√©rica que tambi√©n resultaba en un 400.

Problemas detectados:

Respuestas HTTP no alineadas con la sem√°ntica de autenticaci√≥n/autorizaci√≥n.

Riesgo de user enumeration si se daban mensajes demasiado espec√≠ficos.

Falta de uniformidad en el manejo de errores de autenticaci√≥n y registro.

---

## 3. Decision  
Se introdujeron excepciones espec√≠ficas y un @ControllerAdvice para mapearlas a los c√≥digos HTTP correctos:

401 Unauthorized ‚Üí para credenciales inv√°lidas (AuthenticationException).

409 Conflict ‚Üí para usuario ya existente (UserAlreadyExistsException).

El @ControllerAdvice maneja estas excepciones devolviendo un cuerpo uniforme, con mensaje gen√©rico para evitar user enumeration:

```java
@ResponseStatus(HttpStatus.UNAUTHORIZED)
@ExceptionHandler(AuthenticationException.class)
public ErrorResponse handleAuthException(AuthenticationException ex) {
    return new ErrorResponse("Invalid username or password");
}

@ResponseStatus(HttpStatus.CONFLICT)
@ExceptionHandler(UserAlreadyExistsException.class)
public ErrorResponse handleUserExists(UserAlreadyExistsException ex) {
    return new ErrorResponse("User already exists");
}

```

---

## 4. Rationale  
Justifica **por qu√©** esta fue la mejor opci√≥n:  
- Comparar con alternativas descartadas.  
- Beneficios de la soluci√≥n elegida.  
- Impacto esperado en el proyecto.

---

## 5. Consequences  
Consecuencias

Positivas:

Sem√°ntica HTTP correcta para autenticaci√≥n y registro.

Mayor claridad para clientes API.

Seguridad reforzada contra user enumeration.

C√≥digo m√°s mantenible al centralizar manejo de excepciones.

Negativas:

Se a√±adieron nuevas clases de excepci√≥n y controlador de errores.

Se tuvo que actualizar la suite de tests para validar nuevos c√≥digos HTTP.

---

## 7. References  
RFC 7235: Hypertext Transfer Protocol (HTTP/1.1): Authentication

RFC 9110: HTTP Semantics

---
